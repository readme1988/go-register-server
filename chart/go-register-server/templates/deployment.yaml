apiVersion: {{ include "app.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
{{ include "service.labels.standard" . | indent 4 }}
{{ include "service.logging.deployment.label" . | indent 4 }}
spec:
  strategy:
    type: {{ .Values.deploymentUpdate.type }}
    {{- if eq .Values.deploymentUpdate.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.deploymentUpdate.maxSurge }}
      maxUnavailable: {{ .Values.deploymentUpdate.maxUnavailable }}
    {{- else }}
    rollingUpdate: null
    {{- end}}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
{{ include "service.match.labels" . | indent 6 }}
  template:
    metadata:
      annotations:
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | trimSuffix "\n" | indent 8 }}
{{- end }}
{{ include "service.monitoring.pod.annotations" . | indent 8 }}
      labels:
{{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
{{- end }}
{{ include "service.microservice.labels" . | indent 8 }}
{{ include "service.labels.standard" . | indent 8 }}
    spec:
  {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
  {{- end }}
      containers:
      - name: {{ .Release.Name }}
        image: {{ include "service.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: REGISTER_SERVER_NAMESPACE
          value: {{ .Release.Namespace }}
{{- range $name, $value := .Values.env.open }}
{{- if not (empty $value) }}
        - name: {{ $name | quote }}
          value: {{ $value | quote }}
{{- end }}
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        ports:
          - name: http
            containerPort: 8000
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /eureka/apps/delta
            port: 8000
            scheme: HTTP
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /eureka/apps/delta
            port: 8000
            scheme: HTTP
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      serviceAccountName: {{ if .Values.rbac.create }}"{{ .Release.Name }}"{{ else }}"{{ .Values.rbac.serviceAccountName }}"{{ end }}